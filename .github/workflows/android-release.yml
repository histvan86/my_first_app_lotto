name: Android Release Build & Firebase Distribution

on:
  release:
    types: [published]
  workflow_dispatch:

jobs:
  build-and-distribute:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Java 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "17"

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: "3.x"

      - name: Flutter pub get
        run: flutter pub get

      # ── Robust google-services.json writer + validator ─────────────────────────
      - name: Write google-services.json (robust)
        run: |
          set -e
          mkdir -p android/app
          SEC="${{ secrets.FIREBASE_GOOGLE_SERVICES_JSON }}"

          # Ha a Secret ténylegesen egy jól formázott JSON (első karakter '{'), írjuk ki simán.
          if printf "%s" "$SEC" | head -c 1 | grep -q "{" ; then
            cat > android/app/google-services.json <<'JSON'
          ${{ secrets.FIREBASE_GOOGLE_SERVICES_JSON }}
          JSON
          else
            # Különben próbáljuk meg visszaalakítani (escaped \n, vagy base64) és JSON-ná formázni.
            python - <<'PY'
            import sys, json, base64
            s = sys.stdin.read()
            # 1) próbáljuk meg a \n escape-eket visszafejteni
            try:
                s1 = bytes(s, "utf-8").decode("unicode_escape")
            except Exception:
                s1 = s
            # 2) megpróbáljuk JSON-ként beolvasni
            def try_json(x):
                try:
                    return json.loads(x)
                except Exception:
                    return None
            data = try_json(s) or try_json(s1)
            # 3) ha nem megy, próbáljuk base64-nek
            if data is None:
                try:
                    data = json.loads(base64.b64decode(s))
                except Exception:
                    pass
            if data is None:
                raise SystemExit("ERROR: FIREBASE_GOOGLE_SERVICES_JSON nem érvényes JSON (se raw, se escaped, se base64).")
            open("android/app/google-services.json","w",encoding="utf-8").write(json.dumps(data, ensure_ascii=False, indent=2))
            PY
            printf "%s" "$SEC" | python -
          fi

          test -s android/app/google-services.json || (echo "google-services.json üres!" && exit 1)
          echo "google-services.json létrehozva."

      - name: Validate google-services.json + package name
        run: |
          python - <<'PY'
          import json, sys
          p = "android/app/google-services.json"
          with open(p, "r", encoding="utf-8") as f:
              data = json.load(f)

          # minimális szerkezeti ellenőrzés
          assert isinstance(data, dict), "Root nem dict"
          assert "project_info" in data, "project_info hiányzik"
          assert "client" in data and isinstance(data["client"], list) and data["client"], "client lista hiányzik/üres"

          # package name egyezés (Firebase JSON vs app build.gradle applicationId)
          pkg = None
          for c in data["client"]:
              ci = c.get("client_info", {})
              ai = ci.get("android_client_info", {})
              if "package_name" in ai:
                  pkg = ai["package_name"]
                  break
          assert pkg, "package_name nem található a JSON-ban"

          EXPECTED = "com.histvan86.my_first_app_lotto"
          assert pkg == EXPECTED, f"package_name nem egyezik! JSON: {pkg}  !=  EXPECTED: {EXPECTED}"
          print("google-services.json OK, package_name egyezik:", pkg)
          PY

      # ── Build ───────────────────────────────────────────────────────────────────
      - name: Build Android APK (release)
        run: flutter build apk --release

      - name: List APK files
        run: ls -R build/app/outputs/ || true

      # ── Firebase App Distribution (tokenes mód) ────────────────────────────────
      - name: Install Firebase CLI
        run: npm install -g firebase-tools

      - name: Distribute to Firebase
        env:
          FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}
        run: |
          firebase appdistribution:distribute build/app/outputs/flutter-apk/app-release.apk \
          --app ${{ secrets.FIREBASE_APP_ID_ANDROID }} \
          --groups testers \
          --release-notes "Release ${{ github.event.release.tag_name }}"
